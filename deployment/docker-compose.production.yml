# Production Docker Compose configuration for WASM-Torch
# For smaller deployments or development/staging environments

version: '3.8'

services:
  wasm-torch-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.production
    image: wasm-torch:1.0.0
    container_name: wasm-torch-api
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
      - WORKERS=4
      - CONFIG_PATH=/app/config/production.yaml
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
    volumes:
      - ./config/production.yaml:/app/config/production.yaml:ro
      - model_cache:/app/cache
      - prometheus_data:/tmp/prometheus_multiproc
      - /tmp:/tmp
    networks:
      - wasm-torch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=2G,mode=1777
    user: "1000:1000"

  nginx:
    image: nginx:1.25-alpine
    container_name: wasm-torch-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - wasm-torch-network
    depends_on:
      - wasm-torch-api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: wasm-torch-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - wasm-torch-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.1.0
    container_name: wasm-torch-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - wasm-torch-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    container_name: wasm-torch-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - wasm-torch-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    sysctls:
      - net.core.somaxconn=65535

  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: wasm-torch-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - wasm-torch-network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:16686/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation
  fluentd:
    build:
      context: ./logging
      dockerfile: Dockerfile.fluentd
    container_name: wasm-torch-fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_logs:/var/log/fluentd
    networks:
      - wasm-torch-network
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: wasm-torch-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - wasm-torch-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: wasm-torch-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - wasm-torch-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  model_cache:
    driver: local
  prometheus_data:
    driver: local
  prometheus_storage:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  fluentd_logs:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  wasm-torch-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24