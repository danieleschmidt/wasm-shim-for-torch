apiVersion: v1
kind: Namespace
metadata:
  name: wasm-torch-prod
  labels:
    app: wasm-torch
    environment: production
    version: "4.0"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wasm-torch-config
  namespace: wasm-torch-prod
data:
  production.yaml: |
    # WASM-Torch Production Configuration v4.0
    system:
      environment: production
      region: global
      deployment_strategy: blue_green
      
    # Autonomous SDLC v4.0 Configuration
    autonomous_sdlc:
      enabled: true
      quantum_optimization: true
      evolution_population_size: 50
      cycle_timeout: 300
      phases:
        - analysis
        - design
        - implementation
        - testing
        - deployment
        - monitoring
        - optimization
      predictive_models:
        load_prediction:
          accuracy_target: 0.90
        failure_prediction:
          accuracy_target: 0.95
        optimization_impact:
          accuracy_target: 0.85
    
    # Enterprise Reliability Configuration
    reliability:
      circuit_breakers:
        database:
          failure_threshold: 3
          recovery_timeout: 30
        external_api:
          failure_threshold: 5
          recovery_timeout: 60
        quantum_optimization:
          failure_threshold: 3
          recovery_timeout: 45
      health_monitoring:
        interval: 15
        critical_checks:
          - system_memory
          - system_cpu
          - application_health
      error_handling:
        retry_strategies: true
        recovery_attempts: 3
        
    # Planetary Scale Optimization Configuration
    scaling:
      auto_scaling: true
      prediction_horizon: 300
      resource_pools:
        cpu:
          min_capacity: 2
          max_capacity: 32
          target_utilization: 0.75
        memory:
          min_capacity: 4
          max_capacity: 128
          target_utilization: 0.70
        gpu:
          min_capacity: 0
          max_capacity: 8
          target_utilization: 0.80
        quantum_cores:
          min_capacity: 1
          max_capacity: 16
          target_utilization: 0.60
      
    # Global Deployment Settings
    global:
      regions:
        - us-east-1
        - us-west-2
        - eu-west-1
        - eu-central-1
        - ap-southeast-1
        - ap-northeast-1
      compliance:
        gdpr: true
        ccpa: true
        pdpa: true
      localization:
        languages:
          - en
          - es
          - fr
          - de
          - ja
          - zh
      
    # Performance Configuration
    performance:
      cache:
        type: hyperdimensional
        size: 2048MB
        ttl: 3600
      quantum:
        coherence_time: 100
        optimization_strategy: hybrid
      monitoring:
        metrics_retention: 30d
        sample_rate: 0.1
        
    # Security Configuration
    security:
      encryption:
        at_rest: true
        in_transit: true
        algorithm: AES-256-GCM
      authentication:
        method: JWT
        token_expiry: 3600
      rate_limiting:
        requests_per_minute: 1000
        burst_size: 100

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wasm-torch-api
  namespace: wasm-torch-prod
  labels:
    app: wasm-torch-api
    tier: backend
    version: "4.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: wasm-torch-api
  template:
    metadata:
      labels:
        app: wasm-torch-api
        tier: backend
        version: "4.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: wasm-torch-service-account
      containers:
      - name: wasm-torch-api
        image: ghcr.io/terragon-ai/wasm-torch:v4.0-prod
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8090
          name: monitoring
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: CONFIG_PATH
          value: "/etc/wasm-torch/production.yaml"
        - name: ENABLE_AUTONOMOUS_SDLC
          value: "true"
        - name: ENABLE_QUANTUM_OPTIMIZATION
          value: "true"
        - name: ENABLE_PLANETARY_SCALING
          value: "true"
        volumeMounts:
        - name: config
          mountPath: /etc/wasm-torch
          readOnly: true
        - name: cache-storage
          mountPath: /var/cache/wasm-torch
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: wasm-torch-config
      - name: cache-storage
        emptyDir:
          sizeLimit: 8Gi
      nodeSelector:
        node-type: compute-optimized
      tolerations:
      - key: "compute-optimized"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: wasm-torch-api-service
  namespace: wasm-torch-prod
  labels:
    app: wasm-torch-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8090
    targetPort: 8090
    protocol: TCP
    name: monitoring
  selector:
    app: wasm-torch-api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wasm-torch-ingress
  namespace: wasm-torch-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.wasm-torch.com
    - api-eu.wasm-torch.com
    - api-ap.wasm-torch.com
    secretName: wasm-torch-tls
  rules:
  - host: api.wasm-torch.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wasm-torch-api-service
            port:
              number: 80
  - host: api-eu.wasm-torch.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wasm-torch-api-service
            port:
              number: 80
  - host: api-ap.wasm-torch.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wasm-torch-api-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: wasm-torch-hpa
  namespace: wasm-torch-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wasm-torch-api
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: quantum_coherence
      target:
        type: AverageValue
        averageValue: "0.8"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: wasm-torch-pdb
  namespace: wasm-torch-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: wasm-torch-api

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wasm-torch-service-account
  namespace: wasm-torch-prod

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: wasm-torch-role
  namespace: wasm-torch-prod
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: wasm-torch-role-binding
  namespace: wasm-torch-prod
subjects:
- kind: ServiceAccount
  name: wasm-torch-service-account
  namespace: wasm-torch-prod
roleRef:
  kind: Role
  name: wasm-torch-role
  apiGroup: rbac.authorization.k8s.io

---
# Monitoring Stack
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: wasm-torch-prod
  labels:
    app: prometheus
spec:
  ports:
  - port: 9090
    name: web
  clusterIP: None
  selector:
    app: prometheus

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: wasm-torch-prod
spec:
  serviceName: prometheus
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.40.0
        ports:
        - containerPort: 9090
          name: web
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--web.enable-lifecycle'
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
  volumeClaimTemplates:
  - metadata:
      name: prometheus-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: wasm-torch-prod
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "wasm-torch.rules"
    
    scrape_configs:
    - job_name: 'wasm-torch-api'
      static_configs:
      - targets: ['wasm-torch-api-service:8090']
      scrape_interval: 5s
      metrics_path: /metrics
    
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - wasm-torch-prod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
        
  wasm-torch.rules: |
    groups:
    - name: wasm-torch
      rules:
      - alert: HighErrorRate
        expr: rate(wasm_torch_errors_total[5m]) > 0.05
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: High error rate detected
          
      - alert: HighLatency
        expr: histogram_quantile(0.95, rate(wasm_torch_request_duration_seconds_bucket[5m])) > 0.5
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High latency detected
          
      - alert: LowQuantumCoherence
        expr: wasm_torch_quantum_coherence < 0.5
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Quantum coherence below critical threshold

---
# Grafana for visualization
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: wasm-torch-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:9.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"  # Change this in production
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-config
        configMap:
          name: grafana-config

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: wasm-torch-prod
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: wasm-torch-prod
data:
  datasource.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
  dashboard.yml: |
    apiVersion: 1
    providers:
    - name: 'WASM-Torch'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards